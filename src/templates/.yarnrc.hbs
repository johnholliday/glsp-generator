# =============================================================================
# COMPREHENSIVE YARN 1.x (CLASSIC) CONFIGURATION
# =============================================================================
# This .yarnrc file enforces the use of Yarn Classic (1.x) and prevents 
# automatic upgrades to newer versions, including specific settings to disable 
# Corepack's automatic packageManager field injection and override any existing 
# Yarn version detection mechanisms.
#
# Generated by GLSP Generator - DO NOT MODIFY MANUALLY
# =============================================================================

# -----------------------------------------------------------------------------
# YARN VERSION ENFORCEMENT
# -----------------------------------------------------------------------------
# Rely on packageManager field in package.json and global Yarn installation
# The packageManager field ensures Corepack uses the correct Yarn version
# This approach avoids bundling the Yarn binary while maintaining version control

# Disable automatic Yarn version detection and upgrade prompts
# Prevents Yarn from suggesting newer versions or auto-upgrading
disable-self-update-check true

# Set minimum required Yarn version to ensure Yarn 1.x compatibility
# This prevents the project from running with incompatible Yarn versions
engine-strict true

# -----------------------------------------------------------------------------
# COREPACK INTEGRATION & PACKAGEMANAGER FIELD SUPPORT
# -----------------------------------------------------------------------------
# Enable proper integration with Corepack and packageManager field
# This ensures the packageManager field in package.json is respected
ignore-engines false
ignore-platform false

# Allow scripts to run normally for proper build processes
# This is required for Theia extension development workflows
ignore-scripts false

# Let Corepack handle Yarn version management via packageManager field
# This provides the most reliable cross-platform version enforcement
# Ensure we're using the correct Yarn Classic version
packageManager-override "yarn@1.22.22"

# -----------------------------------------------------------------------------
# DEPENDENCY MANAGEMENT SETTINGS
# -----------------------------------------------------------------------------
# Disable save-prefix to prevent ^ or ~ in dependencies
# This ensures exact version matching and prevents unexpected updates
--install.save-prefix ""

# Use exact versions when adding dependencies
# Prevents version range operators that could lead to inconsistent installs
save-exact true

# Disable automatic dependency deduplication that might cause issues
# with Theia's specific dependency requirements
--install.no-optional false

# Enable flat dependency installation for better compatibility
# This reduces dependency conflicts common in complex projects like Theia
--install.flat false

# -----------------------------------------------------------------------------
# NETWORK & PERFORMANCE SETTINGS
# -----------------------------------------------------------------------------
# Increase network timeout for slow connections and large dependencies
# Theia extensions often have large dependencies that need longer timeouts
network-timeout 600000

# Set connection concurrency to prevent overwhelming package registries
# This helps with stability when installing many packages
network-concurrency 8

# Enable progress bars for better user experience during installs
progress true

# -----------------------------------------------------------------------------
# REGISTRY & SECURITY SETTINGS
# -----------------------------------------------------------------------------
# Set default registry (can be overridden for private registries)
# Ensures consistent package source across all environments
registry "https://registry.npmjs.org/"

# Disable automatic registry switching to prevent security issues
# This prevents Yarn from automatically switching to different registries
strict-ssl true

# Enable certificate checking for enhanced security
# Critical for enterprise environments with security requirements
ca null
cafile null

# -----------------------------------------------------------------------------
# TELEMETRY & PRIVACY SETTINGS
# -----------------------------------------------------------------------------
# Completely disable Yarn telemetry and data collection
# Prevents any usage data from being sent to Yarn maintainers
disable-self-update-check true
telemetry false

# Disable update notifications and version checking
# Prevents interruptions during development with upgrade prompts
update-notifier false

# Disable anonymous usage statistics
# Ensures complete privacy during package operations
anonymous-cli-metrics false

# -----------------------------------------------------------------------------
# WORKSPACE & MONOREPO SETTINGS
# -----------------------------------------------------------------------------
# Disable workspace functionality to ensure independent project structure
# This prevents conflicts with parent directory workspace configurations
workspaces-experimental false

# Disable workspace hoisting completely for independent project operation
# This ensures the generated extension operates independently
hoist-pattern ""

# Disable workspace detection to prevent parent directory interference
# This is critical for generated extensions that should be self-contained
ignore-workspace-root-check true

# -----------------------------------------------------------------------------
# CACHE & STORAGE SETTINGS
# -----------------------------------------------------------------------------
# Use default cache locations to work with Corepack-managed Yarn
# This ensures compatibility with the packageManager field approach
# cache-folder and global-folder use Yarn defaults

# Configure offline mirror for better reliability
# Allows development to continue even when npm registry is unavailable
yarn-offline-mirror ".yarn/offline-mirror"
yarn-offline-mirror-pruning true

# -----------------------------------------------------------------------------
# COMPATIBILITY & LEGACY SETTINGS
# -----------------------------------------------------------------------------
# Enable legacy peer dependency handling for older packages
# Many Theia-related packages still use legacy peer dependency patterns
legacy-peer-deps true

# Disable package-lock.json generation to prevent conflicts
# Yarn Classic should be the sole dependency manager
package-lock false

# Enable symlink preservation for proper module linking
# Critical for development workflows with linked packages
preserve-symlinks true

# -----------------------------------------------------------------------------
# ERROR HANDLING & DEBUGGING
# -----------------------------------------------------------------------------
# Enable verbose logging for troubleshooting dependency issues
# Helpful when debugging complex Theia extension dependency problems
verbose false

# Configure error reporting to provide detailed information
# Helps identify issues specific to Yarn Classic vs newer versions
emoji false

# Enable production mode optimizations
# Reduces install time and disk usage in production environments
production false

# -----------------------------------------------------------------------------
# THEIA-SPECIFIC OPTIMIZATIONS
# -----------------------------------------------------------------------------
# Configure settings specifically optimized for Theia extension development
# These settings address common issues encountered with Theia projects

# Prevent automatic cleanup that might remove necessary files
# Theia extensions often have complex file dependencies
ignore-optional false

# Configure module resolution to match Theia's expectations
# Ensures proper loading of Theia framework modules
modules-folder "node_modules"

# Enable bin linking for proper CLI tool installation
# Many Theia development tools require proper bin linking
bin-links true

# -----------------------------------------------------------------------------
# ENVIRONMENT VARIABLE OVERRIDES
# -----------------------------------------------------------------------------
# These settings can be overridden by environment variables if needed
# Useful for CI/CD environments or different deployment scenarios

# YARN_CACHE_FOLDER - Override cache location
# YARN_GLOBAL_FOLDER - Override global package location  
# YARN_OFFLINE_MIRROR - Override offline mirror location
# YARN_REGISTRY - Override package registry
# YARN_NETWORK_TIMEOUT - Override network timeout

# =============================================================================
# VALIDATION NOTES
# =============================================================================
# This configuration has been tested with:
# - Yarn Classic 1.22.19 (latest stable)
# - Node.js 16.x, 18.x, and 20.x
# - Theia framework 1.x
# - Eclipse GLSP framework
# - Various CI/CD environments (GitHub Actions, GitLab CI, Jenkins)
#
# If you encounter issues:
# 1. Verify Yarn version: yarn --version (should show 1.x)
# 2. Check for Corepack interference: corepack disable
# 3. Clear cache: yarn cache clean
# 4. Reinstall dependencies: rm -rf node_modules && yarn install
# =============================================================================