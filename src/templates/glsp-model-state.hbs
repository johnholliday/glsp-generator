import { injectable } from 'inversify';
import { GModelElement, GModelRoot, ModelState } from '@eclipse-glsp/server';

/**
 * Model state management for {{projectName}} diagrams
 */
@injectable()
export class {{toPascalCase projectName}}ModelState extends ModelState {
    protected sourceUri?: string;
    protected modelRoot?: GModelRoot;
    protected modelIndex = new Map<string, GModelElement>();

    get root(): GModelRoot {
        if (!this.modelRoot) {
            throw new Error('Model root not initialized');
        }
        return this.modelRoot;
    }

    updateRoot(newRoot: GModelRoot): void {
        this.modelRoot = newRoot;
        this.modelIndex.clear();
        this.indexElement(newRoot);
    }
    
    private indexElement(element: GModelElement): void {
        this.modelIndex.set(element.id, element);
        if ('children' in element && Array.isArray((element as any).children)) {
            for (const child of (element as any).children) {
                this.indexElement(child);
            }
        }
    }

    setSourceUri(uri: string): void {
        this.sourceUri = uri;
    }

    getSourceUri(): string | undefined {
        return this.sourceUri;
    }

    {{#each interfaces}}
    /**
     * Get all {{name}} elements from the model
     */
    getAll{{pluralize name}}(): GModelElement[] {
        return Array.from(this.modelIndex.values()).filter(element => element.type === '{{toLowerCase name}}');
    }

    /**
     * Find {{name}} by ID
     */
    find{{name}}ById(id: string): GModelElement | undefined {
        const element = this.modelIndex.get(id);
        return element && element.type === '{{toLowerCase name}}' ? element : undefined;
    }
    {{/each}}

    /**
     * Get all edges in the model
     */
    getAllEdges(): GModelElement[] {
        return Array.from(this.modelIndex.values()).filter(element => element.type === 'edge');
    }

    /**
     * Find edges connected to a specific node
     */
    findEdgesForNode(nodeId: string): GModelElement[] {
        return this.getAllEdges().filter(edge => {
            const e = edge as any;
            return e.sourceId === nodeId || e.targetId === nodeId;
        });
    }
}